// routes/notes.js
const mongoose = require('mongoose');



const express = require('express');
const router = express.Router();
const auth = require('../middleware/auth');
const Note = require('../models/Note');


const authenticateToken = require('../middleware/auth.js'); // üëà –î–æ–¥–∞—î–º–æ middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó


// // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏

router.get('/', authenticateToken, async (req, res) => {
  try {
    console.log('req.user:', req.user);
    const authorIdRaw = req.user._id || req.user.id;
    if (!authorIdRaw) {
      return res.status(400).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É —Ç–æ–∫–µ–Ω—ñ' });
    }

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ ObjectId –∑ new
    const authorId = new mongoose.Types.ObjectId(authorIdRaw);

    const notes = await Note.find({ authorId });
    res.json(notes);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞' });
  }
});



// –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ ID
router.get('/:id', async (req, res) => {
  try {
    const note = await Note.findById(req.params.id);
    if (!note) return res.status(404).json({ message: '–ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
    res.json(note);
  } catch (err) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏' });
  }
});



router.post('/', auth, async (req, res) => {
  try {
    const { title, content, completed, deadline } = req.body; // –ù–µ –≤–∫–ª—é—á–∞—î–º–æ authorId —ñ–∑ body
    const note = new Note({
      title: title || '',
      content: content || '',
      completed: completed || false,
      deadline: deadline || null,
      authorId: req.user.userId // üëà –ë–µ—Ä–µ–º–æ authorId –∑ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    });
    await note.save();
    res.status(201).json(note);
  } catch (err) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏' });
  }
});



router.put('/:id', async (req, res) => {
  try {
    const { title, content, completed, deadline, authorId } = req.body;

    const updatedNote = await Note.findByIdAndUpdate(
      req.params.id,
      {
        title,
        content,
        completed,
        deadline,
        authorId,
        updatedAt: new Date()
      },
      { new: true }
    );

    if (!updatedNote) {
      return res.status(404).json({ message: '–ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json(updatedNote);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});



// –í—ñ–¥–¥–∞—î–º–æ –Ω–æ—Ç–∞—Ç–∫—É —É –≤–∏–≥–ª—è–¥—ñ JSON
router.get('/edit/:id', async (req, res) => {
  try {
    const noteId = req.params.id;
    const note = await Note.findById(noteId);
    if (!note) return res.status(404).send('–ù–æ—Ç–∞—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    res.json(note);
  } catch (error) {
    console.error(error);
    res.status(500).send('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});


router.delete('/:id', async (req, res) => {
  try {
    const deleted = await Note.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: '–ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
    res.json({ message: '–ù–æ—Ç–∞—Ç–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});


module.exports = router;
